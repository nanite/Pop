plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
    id 'idea'
    id 'pro.mikey.plugins.insaniam' version "0.1-SNAPSHOT"
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            client()

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]

    inputs.properties replaceProperties
    expand replaceProperties

    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

def changelogData = insaniamUtils.createChangelog {
    file = file('CHANGELOG.md')
    versionPattern = ~/## \[[^]]+]/
    fallbackValue = "No changelog provided"
    version = project.mod_version
}

publishMods {
    def curseToken = providers.environmentVariable("CURSE_TOKEN")
    dryRun = !curseToken.isPresent()
    changelog = changelogData.trim()
    version = "${mod_version}"
    type = STABLE

    file = jar.archiveFile
    displayName = "Pop ${mod_version}"
    modLoaders.add("neoforge")

    // Get the commit message from the environment variable
    def commitMessage = providers.environmentVariable("COMMIT_MESSAGE").orElse("No commit message provided")

    curseforge {
        dryRun = !commitMessage.get().contains("[skip-curse]")
        accessToken = curseToken.orElse("dryRun")
        projectId = "1231826"
        minecraftVersions.add("${minecraft_version}")
    }

    modrinth {
        dryRun = !commitMessage.get().contains("[skip-modrinth]")
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "uu63G4RC"
        minecraftVersions.add("${minecraft_version}")
    }

    github {
        dryRun = !commitMessage.get().contains("[skip-github]")
        file = jar.archiveFile

        repository = "nanite/pop"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
        tagName = providers.environmentVariable("GITHUB_REF_NAME").orElse("dryRun")
    }
}
